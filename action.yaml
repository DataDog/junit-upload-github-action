# Composite action to upload junit test result files to Datadog CI Visibility
name: 'Datadog JUnitXML Upload'
description: 'Upload JUnitXML reports files to Datadog CI Visibility'
inputs:
  api-key:
    required: true
    description: Datadog API key to use to upload the junit files.
  service:
    required: true
    description: Service name to use with the uploaded test results.
  datadog-site:
    required: true
    default: datadoghq.com
    description: The Datadog site to upload the files to.
  files:
    required: true
    description: JUnit files to upload.
    default: .
  concurrency:
    required: true
    description: Controls the maximum number of concurrent file uploads.
    default: "20"
  tags:
    required: false
    description: Datadog tags to associate with the uploaded test results.
  env:
    required: false
    description: Datadog env to use for the tests.
  logs:
    required: false
    description: Set to "true" to enable forwarding content from XML reports as logs.
runs:
  using: "composite"
  steps:
    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: "16"

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      shell: bash
      run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

    - name: Cache yarn dependencies
      id: yarn-cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Get Datadog CLI
      if: steps.yarn-cache.outputs.cache-hit != 'true'
      shell: bash
      run: yarn global add @datadog/datadog-ci

    - name: Upload the JUnit files
      if: ${{ inputs.logs }} == "true"
      shell: bash
      run: |
        datadog-ci junit upload \
          --service ${{ inputs.service }} \
          --tags "${{ inputs.tags }}" \
          --logs \
          --max-concurrency ${{ inputs.concurrency }} \
          ${{ inputs.files }}
      env:
        DATADOG_API_KEY: ${{ inputs.api-key }}
        DATADOG_SITE: ${{ inputs.datadog-site }}
        DD_ENV: ${{ inputs.dd-env }}

    - name: Upload the JUnit files
      if: ${{ inputs.logs }}) != "true"
      shell: bash
      run: |
        datadog-ci junit upload \
          --service ${{ inputs.service }} \
          --tags "${{ inputs.tags }}" \
          --max-concurrency ${{ inputs.concurrency }} \
          ${{ inputs.files }}
      env:
        DATADOG_API_KEY: ${{ inputs.api-key }}
        DATADOG_SITE: ${{ inputs.datadog-site }}
        DD_ENV: ${{ inputs.dd-env }}
