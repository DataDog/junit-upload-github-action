# Composite action to upload junit test result files to Datadog CI Visibility
name: "Datadog JUnitXML Upload"
description: "Upload JUnitXML reports files to Datadog CI Visibility"
inputs:
  api-key:
    required: true
    description: Datadog API key to use to upload the junit files.
  service:
    required: true
    description: Service name to use with the uploaded test results.
  datadog-site:
    required: true
    default: datadoghq.com
    description: The Datadog site to upload the files to.
  files:
    required: true
    description: JUnit files to upload.
    default: .
  concurrency:
    required: true
    description: Controls the maximum number of concurrent file uploads.
    default: "20"
  node-version:
    required: true
    description: The node version used to install datadog-ci
    default: "20"
  tags:
    required: false
    description: Datadog tags to associate with the uploaded test results.
  env:
    required: false
    description: Datadog env to use for the tests.
  logs:
    required: false
    description: Set to "true" to enable forwarding content from XML reports as logs.
  extra-args:
    default: ""
    description: Extra args to be passed to the datadog-ci cli.
    required: false
runs:
  using: "composite"
  steps:
    - name: Install node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
    - name: Upload the JUnit files
      if: ${{ inputs.logs == 'true' }}
      shell: bash
      run: |
        npm exec @datadog/datadog-ci junit upload \
          --service ${{ inputs.service }} \
          --logs \
          --max-concurrency ${{ inputs.concurrency }} \
          ${{ inputs.extra-args }} \
          ${{ inputs.files }}
      env:
        DATADOG_API_KEY: ${{ inputs.api-key }}
        DATADOG_SITE: ${{ inputs.datadog-site }}
        DD_ENV: ${{ inputs.env }}
        DD_TAGS: ${{ inputs.tags }}
    - name: Upload the JUnit files
      if: ${{ inputs.logs != 'true' }}
      shell: bash
      run: |
        npm exec @datadog/datadog-ci junit upload \
          --service ${{ inputs.service }} \
          --max-concurrency ${{ inputs.concurrency }} \
          ${{ inputs.extra-args }} \
          ${{ inputs.files }}
      env:
        DATADOG_API_KEY: ${{ inputs.api-key }}
        DATADOG_SITE: ${{ inputs.datadog-site }}
        DD_ENV: ${{ inputs.env }}
        DD_TAGS: ${{ inputs.tags }}
